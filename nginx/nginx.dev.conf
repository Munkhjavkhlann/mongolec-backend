# Nginx configuration for local CDN simulation
# Provides caching, compression, and proxy functionality

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;

    # Performance settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Cache settings
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=storage_cache:10m max_size=1g inactive=60m use_temp_path=off;
    proxy_cache_key "$scheme$request_method$host$request_uri";

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=uploads:10m rate=5r/s;

    # Upstream for MinIO
    upstream minio {
        server minio:9000;
        keepalive 32;
    }

    # Main server block
    server {
        listen 80;
        server_name localhost;
        
        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Referrer-Policy strict-origin-when-cross-origin;

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Images with aggressive caching and transformation support
        location ~* ^/mongolec-dev/tenants/[^/]+/images/ {
            proxy_pass http://minio;
            proxy_cache storage_cache;
            proxy_cache_valid 200 304 7d;
            proxy_cache_valid 404 1m;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            
            # Cache headers
            expires 7d;
            add_header Cache-Control "public, immutable";
            add_header X-Cache-Status $upstream_cache_status;
            
            # CORS for images
            add_header Access-Control-Allow-Origin "*";
            add_header Access-Control-Allow-Methods "GET, OPTIONS";
            
            # Handle OPTIONS requests
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin "*";
                add_header Access-Control-Allow-Methods "GET, OPTIONS";
                add_header Access-Control-Max-Age 86400;
                add_header Content-Length 0;
                return 204;
            }
        }

        # Documents with shorter cache (often private)
        location ~* ^/mongolec-dev/tenants/[^/]+/documents/ {
            proxy_pass http://minio;
            proxy_cache storage_cache;
            proxy_cache_valid 200 1h;
            proxy_cache_valid 404 1m;
            
            expires 1h;
            add_header Cache-Control "private, must-revalidate";
            add_header X-Cache-Status $upstream_cache_status;
        }

        # Media files (videos, audio) with moderate caching
        location ~* ^/mongolec-dev/tenants/[^/]+/media/ {
            proxy_pass http://minio;
            proxy_cache storage_cache;
            proxy_cache_valid 200 1d;
            proxy_cache_valid 404 1m;
            
            expires 1d;
            add_header Cache-Control "public";
            add_header X-Cache-Status $upstream_cache_status;
            
            # Enable range requests for media
            proxy_set_header Range $http_range;
            proxy_set_header If-Range $http_if_range;
        }

        # Public files with long caching
        location ~* ^/mongolec-dev/tenants/[^/]+/public/ {
            proxy_pass http://minio;
            proxy_cache storage_cache;
            proxy_cache_valid 200 30d;
            proxy_cache_valid 404 5m;
            
            expires 30d;
            add_header Cache-Control "public, immutable";
            add_header X-Cache-Status $upstream_cache_status;
            
            # CORS for public files
            add_header Access-Control-Allow-Origin "*";
        }

        # API proxy with rate limiting
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://api:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # No caching for API
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma no-cache;
            add_header Expires 0;
        }

        # Upload endpoints with stricter rate limiting
        location /api/v1/files/upload {
            limit_req zone=uploads burst=5 nodelay;
            
            proxy_pass http://api:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            # Increase timeouts for file uploads
            proxy_connect_timeout 60s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
            
            # Increase body size for file uploads
            client_max_body_size 100M;
        }

        # Direct MinIO access (fallback)
        location / {
            proxy_pass http://minio;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Basic caching for other files
            proxy_cache storage_cache;
            proxy_cache_valid 200 1h;
            proxy_cache_valid 404 1m;
            
            add_header X-Cache-Status $upstream_cache_status;
        }

        # Error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /404.html {
            return 404 '{"error": "File not found"}';
            add_header Content-Type application/json;
        }
        
        location = /50x.html {
            return 500 '{"error": "Internal server error"}';
            add_header Content-Type application/json;
        }
    }

    # MinIO Console proxy (optional)
    server {
        listen 9001;
        server_name localhost;

        location / {
            proxy_pass http://minio:9001;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket support for MinIO console
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
    }
}

# Additional configuration for production would include:
# - SSL/TLS termination
# - More sophisticated caching rules
# - Security headers
# - WAF rules
# - Monitoring endpoints